- hosts: elevate
  vars:
    project_path: /opt/frontend/mitra-ai-app
    root_path: /opt/frontend

  tasks:
    - name: Slurp host file
      slurp:
        src: "/opt/backend/deployment/.token"
      register: slurpfile

    - name: Fetch .env from Vault
      shell: >
        curl --location --request GET '{{ vaultAddress }}mitra-ai-env' 
        --header 'X-Vault-Token: {{ slurpfile['content'] | b64decode }}'
      register: env_response

    - name: Extract and write the entire data.data to .env
      copy:
        content: "{{ env_response.stdout | from_json | json_query('data.data')}}"
        dest: "{{ project_path}}/.env"

    - name: Fetch .env-cmdrc from Vault
      shell: >
        curl --location --request GET '{{ vaultAddress }}mitra-ai-env-cmdrc' 
        --header 'X-Vault-Token: {{ slurpfile['content'] | b64decode }}'
      register: vault_response

    - name: Ensure Vault response is valid JSON
      fail:
        msg: "Vault response is not valid JSON or does not contain expected data."
      when: vault_response.stdout is not search('\"data\":')

    - name: Extract and write the entire data.data to .env-cmdrc
      copy:
        content: "{{ vault_response.stdout | from_json | json_query('data.data') | to_json }}"
        dest: "{{ project_path }}/.env-cmdrc"

    - name: Verify .env-cmdrc file creation
      stat:
        path: "{{ project_path }}/.env-cmdrc"
      register: env_file_stat

    - name: Fail if .env-cmdrc file was not created
      fail:
        msg: ".env-cmdrc file was not created!"
      when: not env_file_stat.stat.exists

    - name: Ensure project directory exists
      file:
        path: "{{ project_path }}"
        state: directory
        mode: "0755"

    - name: Fetch the latest code
      git:
        repo: https://github.com/ELEVATE-Project/ai-project-creation-portal
        dest: "{{ project_path }}"
        version: "{{ gitBranch }}"
        force: yes

    - name: Remove the old build
      shell: "rm -rf {{project_path}}/build"

    - name: Remove node_modules folder
      shell: "rm -rf {{ project_path }}/node_modules"

    - name: Clear npm cache
      shell: "npm cache clean --force"

    - name: Install dependencies
      shell: "cd {{ project_path }} && npm i --force"

    - name: Fetch pm2 config file
      shell: >
        curl --location --request GET '{{ vaultAddress }}mitraAIAppPM2Config'
        --header 'X-Vault-Token: {{ slurpfile['content'] | b64decode }}' 
        | jq '.data.data' > '{{ project_path }}/pm2.config.json'

    - name: Build mitra-ai app
      shell: "cd {{ project_path }} && npm run build-prod"

    - name: Start pm2
      shell: "cd {{ project_path }} && pm2 start pm2.config.json"
